---
title: "baseline features ~ follow-up BMI change (E12)"
format:
  html:
    toc: true
    code-fold: true
    code-overflow: wrap
    code-tools: true
---

```{r setup, include=F}
knitr::opts_chunk$set(echo = T, message = F, warning = F, eval = F)
```


```{r libs, eval = T}
library(dplyr)
library(ggplot2)
library(here)
library(parallel)
library(broom.mixed)
library(R.utils)
library(MultiAssayExperiment)
here::i_am("helper-bmi.qmd")
```

This script is to explore the association of baseline characteristics and BMI change.

# ∆ BMI

## Load data

Raw data are loaded.

```{r run, eval = F}
# Which baseline features predict dbmi?
load("data/data_normalized.Rdata")
load("src/vars.Rdata")
vars1 <- vars |> dplyr::filter(!assay %in% c("Stool microbiome: ASVs",
                                             "Saliva microbiome: ASVs",
                                             "Stool microbiome: families_clr",
                                             "Saliva microbiome: families_clr")) |> 
  dplyr::filter(!x %in% c('ImmAge_gen_adj', 'weight', 'fm')) |> 
  dplyr::group_by(assay) |> 
  dplyr::summarise(feature = list(x), .groups = 'drop') |> 
  tibble::deframe()

# extract all data in long format plus basic anno
df <- as.data.frame(longForm(subsetByAssay(data, vars1),
                             colData = c("age_at_consent", "interventionId", "subjectId", "visitId", "time",
                                                 'compliance', 'comprate', 'supplement',
                                                 'bmi_at_consent',
                                                 'dbmi',
                                                 'mpstatrs'))) |> 
  dplyr::filter(!is.na(value) & visitId == 'M0') |> 
  dplyr::filter(interventionId!='S' & !visitId %in% c("M12", "M18")) |>
  dplyr::mutate(compliance = factor(compliance, levels = c("low", 'medium', 'high')),
                visitId = factor(visitId, levels = c("M0", "M2", "M4", "M6")),
                visitIdOrdered = ordered(visitId)) |> 
  dplyr::mutate(rowname = paste0(assay, "_", rowname))

# check class
class(df$visitId)
class(df$visitIdOrdered)

# remove full data
rm(data);gc()

data  <- df
variables = unique(data$rowname)
cores = 3


out <- mclapply(variables,  function(i) {
  tryCatch(lm(dbmi ~ bmi_at_consent + age_at_consent + interventionId + value + comprate,
              data = data[data$rowname==i,]),
           error = function(e) return(e))
}, mc.cores = cores, mc.preschedule = T, mc.cleanup = T)
names(out) <- variables

## Remove any with error
out <- out |>
  purrr::keep( ~ !inherits(.x, 'error')) 

# BMI workaround
nobmi <- dplyr::bind_rows(lapply(variables[variables %in% names(out)], function(x) as.data.frame(cbind(x, broom.mixed::tidy(out[[x]]))))) |> 
  dplyr::filter(term != "(Intercept)") |> 
  dplyr::select(x, term, estimate, std.error, p.value) |> 
  dplyr::filter(x!='Body composition_bmi')

bmi <- lm(dbmi ~ age_at_consent + interventionId + value + comprate,
          data = data[data$rowname=='Body composition_bmi',]) |> 
  broom::tidy() |> 
  dplyr::mutate(x = 'Body composition_bmi')|> 
  dplyr::select(x, term, estimate, std.error, p.value)

df <- rbind(nobmi, bmi) |> 
  tidyr::pivot_wider(id_cols = x,
                     names_from = term,
                     values_from = c(estimate, std.error, p.value))
save(df, file = "out/predict_dbmi_baseline_all.Rdata")
```

```{r}
load("out/predict_dbmi_baseline_all.Rdata")
source('src/FDRcorr.R')
df2 <- df |>tidyr::separate(x, "_", into = c('assay', 'var'), extra = 'merge') 
df2 <- FDRcorr(df2)

sig <- df2[df2$p.value_value_adj < 0.05 & !is.na(df2$p.value_value_adj),]
```

## Plot - E12

```{r}
load("data/data_raw.Rdata")
dat <- as.data.frame(longForm(data['cells_single_cells_live_cd3neg_defective_freq_of_live',,],
                              colDataCols = c('subjectId', 'interventionId', 'visitId', 'compliance', 'comprate', 'age_at_consent', 'bmi_at_consent', 'dbmi'))) |> 
  dplyr::filter(visitId == 'M0' & interventionId != 'S')

p <- dat |> 
  ggplot(aes(x = value,
             y = dbmi)) +
  geom_point(alpha = 0.5) +
  ggpubr::stat_cor(method = 'spearman',label.x.npc = 'middle') +
  theme_bw() +
  labs(x = 'defective NK cells at baseline',
       y = '∆ BMI at M6')

ggsave(filename = 'figures-png/e12-dbmi.png',width = 3.5, height = 3.5, plot = p)
```

# Export as ET11

```{r}
load("out/predict_dbmi_baseline_all.Rdata")
load("src/vars.Rdata")

vars <- vars |>  
    dplyr::mutate(label = ifelse(!is.na(`second name`), `second name`, label))
  
assoc_clean <- df2 |> 
  dplyr::left_join(dplyr::select(vars, x, assay, assay2, label),
                   by = c('var' = 'x',
                          'assay' = 'assay')) |>
  dplyr::mutate(variable = ifelse(!is.na(label), label, var),
                assay = ifelse(!is.na(assay2), assay2, assay)) |>
  dplyr::select(-any_of(c("var", "label", "assay2"))) |> 
  dplyr::select(-contains(c("Intercept", "std.error"))) |> 
  dplyr::select(assay, variable, estimate_value, p.value_value, p.value_value_adj, group)

writexl::write_xlsx(assoc_clean, path = here("out/Extended-Data-Table-11.xlsx"))

```

