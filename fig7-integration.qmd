---
title: "Figure 7: Integrative analysis (F7, E14-16)"
format:
  html:
    toc: true
    code-fold: true
    code-overflow: wrap
    code-tools: true
---

::: {.panel-tabset}

# Figures

::: {.panel-tabset}

## Main figure 7

![](figures-png/figure6-integration.png)

## Extended Data Figure 14

![](figures-png/e14-mefisto.png)

## Extended Data Figure 15

![](figures-png/e14.png)

## Extended Data Figure 16

![](figures-png/e15.png)

:::

# Code

## Setup

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = T, message = F, warning = F, eval = F)

suppressMessages(suppressWarnings({
  
    library(dplyr)
    library(ggplot2)
    library(patchwork)
    library(ggtext)
    library(here)
    library(ggrepel)
    library(broom)
    library(ComplexHeatmap)
    library(MultiAssayExperiment)
    library(RColorBrewer)
    library(viridis)
    library(circlize) 
    library(tidyverse)
    library(rcartocolor)
    library(openxlsx)
    library(lmerTest)
    library(lme4)
    library(broom)
  
}))

cols <- c("#1b69a1", "#48a0af", "#71b5a9", "#ec6669", "#f39668", "#bd647d", "#832c9b", "#5f70a8")

here::i_am("fig7-integration.qmd")
source(here("src/rmcorr_plot.R"))

```

## Main figure

### a) Bubble plot

* When do significant changes happen in which ome?
* p value<0.01
* intention to treat, I/K grouped, plotting selected methylation scores in each tissue


```{r}
# Select variables to keep
load(here("src/vars.Rdata"))

vars <- vars |> 
  dplyr::filter(!assay %in% c("Saliva microbiome: ASVs",
                              "Saliva microbiome: ASVs_clr",
                              "Stool microbiome: ASVs",
                              "Stool microbiome: ASVs_clr",
                              "Saliva microbiome: families_clr",
                              "Stool microbiome: families_clr"
                              )) |> 
  dplyr::filter(x != 'ImmAge_gen_adj')

load(here("out/out_lmm_factor.Rdata"))

source(here("src/FDRcorr.R"))
out_lmm <- FDRcorr(out_lmm$`Minimal model`, append = F)

load(here("out/wilcoxon-tests.Rdata"))
wilcox <- wilcoxon_tests$overall |> dplyr::select(-starts_with("p") | (starts_with("p") & ends_with("_adj")))
colnames(wilcox) <- gsub("_adj", "", colnames(wilcox))

source(here('src/bubble_summary.R'))
dat <- bubble_summary(out_lmm,
                      wilcox,
                      vars = vars)

dat <- dat |> 
  dplyr::mutate(group = case_when(grepl("Body|Functional|Routine|Skin|Spiro|Subcut|Vascular", assay) ~ "Clinical features",
                                  grepl("Blood|Immune|Flow", assay) ~ "Blood omics",
                                  grepl("Buccal|Saliva", assay) ~ "Saliva omics",
                                  grepl("Cervical", assay) ~ "Cervix omics",
                                  grepl("Stool", assay) ~ "Stool omics",
                                  grepl("Urine", assay) ~ "Urine omics"),
                group = stringr::str_wrap(group, width = 1),
                group = factor(group, levels = c("Clinical\nfeatures", "Blood\nomics", "Saliva\nomics", "Cervix\nomics", "Stool\nomics" ,"Urine\nomics")))

# dat$assay <- factor(dat$assay, levels = rev(omes))
# dat <- dat |> arrange(assay)

bubble_plot <-  dat |> 
  ggplot(aes(x = visitId, y = assay,
             fill = num_significant,
             size = proportion_significant)) +
  geom_point(shape = 21, alpha = 0.8) +
  scale_size_continuous(range = c(0, 12)) +
  scale_fill_gradientn(colors = cols[c(8, 1, 2, 3, 5, 6)]) +
  labs(x = "", y = "",
       fill = "Number of significant features",
       size = "Proportion of significant features") +
  theme_bw() +
  theme(panel.grid = element_blank(),
        strip.background.x = element_rect(fill = NA,
                                          color = NA),
        axis.ticks.y = element_blank(),
        legend.position = 'bottom',
        legend.direction = 'vertical',
        axis.text.y = element_text(hjust = 1),
        strip.background.y = element_rect(fill = NA,
                                          color = NA)) +
  facet_grid(group~"",drop = T,scales = 'free_y',space = 'free_y'
             ) +
  coord_cartesian(clip = 'off')
```

```{r print.bubbles.all}
cairo_pdf(here("out/pdf/6a.pdf"), width = 4.5, height = 8.5)
print(bubble_plot)
dev.off()
```

#### a_1) Bubble plot, I versus K separately (not used/archive)

* When do significant changes happen in which ome?
* Reran minimal model on I and K groups separately
* p value < 0.01
* intention to treat, plotting selected methylation scores in each tissue

Running LMM in each tissue:

```{r lmm.dat}
# load in data
load("data/data_normalized.Rdata")
load(here("src/vars.Rdata"))
vars <- vars |> 
  dplyr::filter(!grepl("ASV", assay)) |> 
  dplyr::mutate(assay = gsub("TEWL", "transepidermal water loss assay", assay),
                rowname = paste0(assay, "_", x))

# extract all data in long format plus basic anno for relevant omes
df <- as.data.frame(longFormat(data[,,unique(vars$assay)],
                    colData = c("age_at_consent", "interventionId", "subjectId", "visitId", "time", 'compliance', 'comprate', 'supplement',
                                                 'bmi_at_consent'))) |> 
  dplyr::filter(!is.na(value)) |> 
  dplyr::filter(interventionId!='S' & !visitId %in% c("M12", "M18")) |>
  dplyr::mutate(compliance = factor(compliance, levels = c("low", 'medium', 'high'))) |> 
  dplyr::mutate(rowname = paste0(assay, "_", rowname)) |> 
  dplyr::filter(rowname %in% vars$rowname)

# remove full data
rm(data);gc()
```

```{r runIandK.lmm, eval = F}
data  <- df |> 
  dplyr::filter(interventionId == "I")
variables = unique(data$rowname)

source(here('src/summary_lmm_v2.R'))

out_lmm <- summary_lmm(data,
                       variables = variables,
                       models <- list("Minimal model" = 'value ~ visitId + age_at_consent + bmi_at_consent + (1|subjectId)'),
                       timeType = 'factor',
                       outName = 'out_lmm_factor_bubblesI.Rdata',
                       cores = 1)

data  <- df |> 
  dplyr::filter(interventionId == "K")

out_lmm <- summary_lmm(data,
                       variables = variables,
                       models <- list("Minimal model" = 'value ~ visitId + age_at_consent + bmi_at_consent + (1|subjectId)'),
                       timeType = 'factor',
                       outName = 'out_lmm_factor_bubblesK.Rdata',
                       cores = 1)
```

Run t tests separately for I and K:

```{r runIandK.t, eval = F}
load("data/data_raw.Rdata")
load(here("src/vars.Rdata"))

# extract all data in long format plus basic anno
df <- as.data.frame(longFormat(data, colData = c("age_at_consent", "interventionId", "subjectId", "visitId", "time", 'compliance', 'comprate', 'supplement',
                                                 'bmi_at_consent'))) |> 
  dplyr::filter(!is.na(value)) |> 
  dplyr::inner_join(vars, by = c("rowname" = "x",
                                 "assay" = "assay")) |> 
  dplyr::select(-c(label, assay2)) |> 
  dplyr::mutate(rowname = paste0(assay, "_", rowname))
# all(df$rowname %in% vars$x)

# remove S and any non M0-M6
df_raw <- df |>
  dplyr::filter(interventionId!='S' & !visitId %in% c("M12", "M18")) |>
  dplyr::mutate(compliance = factor(compliance, levels = c("low", 'medium', 'high'))) 

# remove full data
rm(data);gc()

# load in data
load("data/data_baseline_change.Rdata")

# extract all data in long format plus basic anno
df <- as.data.frame(longFormat(data, colData = c("age_at_consent", "interventionId", "subjectId", "visitId", "time", 'compliance', 'comprate', 'supplement',
                                                 'bmi_at_consent'))) |> 
  dplyr::filter(!is.na(value)) |> 
  dplyr::inner_join(vars, by = c("rowname" = "x",
                                 "assay" = "assay")) |> 
  dplyr::select(-c(label, assay2)) |> 
  dplyr::mutate(rowname = paste0(assay, "_", rowname))

# remove S and any non M0-M6
df_change <- df |>
  dplyr::filter(interventionId!='S' & !visitId %in% c("M12", "M18")) |>
  dplyr::mutate(compliance = factor(compliance, levels = c("low", 'medium', 'high'))) 

# remove full data
rm(data, df);gc()

source(here('src/t_tests_sep.R'))
df_i <- df_change |> dplyr::filter(interventionId == 'I' & !grepl("ASV", assay))
df_raw_i <- df_raw |> dplyr::filter(interventionId == 'I' & !grepl("ASV", assay))

t_test <- t_tests_sep(df_i, df_raw_i)
save(t_test, file = here("out/t-tests_bubblesI.Rdata"))

df_k <- df_change |> dplyr::filter(interventionId == 'K' & !grepl("ASV", assay))
df_raw_k <- df_raw |> dplyr::filter(interventionId == 'K' & !grepl("ASV", assay))

t_test <- t_tests_sep(df_k, df_raw_k)
save(t_test, file = here("out/t-tests_bubblesK.Rdata"))
```

Put together the bubbles:

```{r}
load("out/out_lmm_factor_bubblesI.Rdata")
load("out/t-tests_bubblesI.Rdata")

dat <- bubble_summary(as.data.frame(out_lmm$`Minimal model`),
                      as.data.frame(t_test$overall),
                      vars = vars)
dat$intervention <- "I"
dat2 <- dat

load("out/out_lmm_factor_bubblesK.Rdata")
load("out/t-tests_bubblesK.Rdata")

dat <- bubble_summary(as.data.frame(out_lmm$`Minimal model`),
                      as.data.frame(t_test$overall),
                      vars = vars)
dat$intervention <- "K"

dat2 <- rbind(dat2,dat)

# sort features
dat <- dat2 |> 
  dplyr::mutate(group = case_when(grepl("Body|Functional|Routine|Skin|Spiro|Subcut|Vascular", assay) ~ "Clinical features",
                                  grepl("Blood|Immune|Flow", assay) ~ "Blood omics",
                                  grepl("Buccal|Saliva", assay) ~ "Oral omics",
                                  grepl("Cervical", assay) ~ "Cervix omics",
                                  grepl("Stool", assay) ~ "Stool omics",
                                  grepl("Urine", assay) ~ "Urine omics"),
                group = stringr::str_wrap(group, width = 1),
                group = factor(group, levels = c("Clinical\nfeatures", "Blood\nomics", "Oral\nomics", "Cervix\nomics", "Stool\nomics" ,"Urine\nomics")))

bubble_plot <- dat |> 
  ggplot(aes(x = visitId, y = assay,
             fill = num_significant,
             size = proportion_significant)) +
  geom_point(shape = 21, alpha = 0.8) +
  scale_size_continuous(range = c(0, 12)) +
  scale_fill_gradientn(colors = cols[c(8, 1, 2, 3, 5, 6)]) +
  labs(x = "", y = "",
       fill = "Proportion significant features",
       size = "Number of significant features") +
  theme_bw() +
  theme(panel.grid = element_blank(),
        strip.background.x = element_rect(fill = NA,
                                          color = NA),
        axis.ticks.y = element_blank(),
        legend.position = 'bottom',
        legend.direction = 'vertical',
        axis.text.y = element_text(hjust = 1),
        strip.background.y = element_rect(fill = NA,
                                          color = NA)) +
  facet_grid(group~intervention,drop = T,scales = 'free_y',
             space = 'free_y') +
  coord_cartesian(clip = 'off')

# dat |> 
#   dplyr::mutate(visitId = factor(visitId, levels = c("M6", "M4", "M2"))) |> 
#   ggplot(aes(x = assay, y = visitId,
#              size = num_significant,
#              fill = proportion_significant)) +
#   geom_point(shape = 21, alpha = 0.8) +
#   scale_size_continuous(range = c(0, 12)) +
#   scale_fill_gradientn(colors = cols[c(8, 1, 2, 3, 5, 6)]) +
#   labs(x = "", y = "",
#        fill = "Proportion significant features",
#        size = "Number of significant features") +
#   theme_bw() +
#   theme(panel.grid = element_blank(),
#         strip.background.x = element_rect(fill = NA,
#                                           color = NA),
#         axis.ticks.y = element_blank(),
#         axis.ticks.x = element_blank(),
#         axis.text.x = element_text(angle = 90, hjust = 1),
#         legend.position = 'bottom',
#         axis.text.y = element_text(hjust = 1),
#         strip.background.y = element_rect(fill = NA,
#                                           color = NA)) +
#   facet_grid(intervention~group,drop = T,scales = 'free_x',
#              space = 'free_x') +
#   coord_cartesian(clip = 'off')
```

```{r print.bubbles}
cairo_pdf(here("out/pdf/6a.pdf"), width = 5, height = 8.5)
print(bubble_plot)
dev.off()
```

#### a_3) Potential diagram - up/down by feature? (not used/archive)

```{r}
# Select variables to keep
load(here("src/vars.Rdata"))
load(here("out/out_lmm_factor.Rdata"))
load(here("out/t-tests.Rdata"))

diagram_summary <- function(lmmdat, t_test, vars){
  
  # Linear mixed models: main data, excluding metabolome
  dat <- lmmdat |> 
    tidyr::separate(x, into = c("assay", "Feature"), sep = "_", extra = "merge") |> 
    dplyr::inner_join(vars, by = c('assay' = 'assay',
                                   'Feature' = 'x'))|> 
    dplyr::mutate(assay = case_when(((assay == "Blood haemogram") | assay2 == 'Blood test') ~ 'Routine bloods',
                                    (grepl('methylation', assay) & grepl('cervical', assay)) ~ 'Cervical methylation',
                                    (grepl('methylation', assay) & grepl('buccal', assay)) ~ 'Buccal methylation',
                                    (grepl('methylation', assay) & grepl('blood', assay)) ~ 'Blood methylation',
                                    grepl("Skin", assay) ~ "Skin histology and TEWL",
                                    grepl("vifat|scfat", Feature) ~ "Subcutaneous and visceral fat",
                                    !is.na(assay2) ~ assay2,
                                    TRUE ~ assay)) |> 
    dplyr::select(assay, Feature, contains(c("p.value_visitId", "estimate"))) |> 
    dplyr::mutate(assay = gsub(": families", "", assay)) |> 
    dplyr::filter(!grepl("ASVs|metabolome", assay)) |> 
    dplyr::select(-contains(c("age", "bmi")))
  
  dat_m <- t_test |> 
    tidyr::separate(rowname, into = c("assay", "Feature"), sep = "_", extra = "merge") |> 
    dplyr::inner_join(vars, by = c('assay' = 'assay',
                                   'Feature' = 'x'))|> 
    dplyr::filter(grepl("nuclear", assay)) |> 
    dplyr::mutate(assay = assay2) |> 
    dplyr::select(assay, Feature, c(M2, M4, M6), starts_with("p_")) |> 
    dplyr::rename_with(~ gsub("p_", "p.value_visitId", .x), starts_with("p_")) |> 
    dplyr::rename_with(~ gsub("M", "estimate_visitIdM", .x), starts_with("M"))
  
  dat <- dat |> 
    dplyr::bind_rows(dat_m) |> 
    pivot_longer(starts_with("p.value_visitIdM"), names_to = "visitId", values_to = "p.value") |> 
    mutate(significant = ifelse(p.value < 0.05, 1, 0)) |> 
    tidyr::pivot_longer(starts_with("estimate"), names_to = 'visitIde', values_to = 'estimate') |> 
    dplyr::mutate(visitIde = gsub("estimate_visitId", "", visitIde),
                  visitId = gsub("p.value_visitId", "", visitId)) |> 
    dplyr::filter(visitId == visitIde) |> 
    dplyr::select(-visitIde) |> 
    dplyr::mutate(dir = ifelse(sign(estimate) == -1, "neg", "pos")) |> 
    group_by(assay, visitId, dir) |> 
    summarise(
      num_significant = sum(significant),
      proportion_significant = sum(significant) / n()) |> 
    ungroup()
  
  return(dat)
}
```

### b) Repeated measures: interaction

```{r rmcorr.interaction}
load("out/rmcorr_full.Rdata")
corr <- corr |>
  # dplyr::mutate(padj_v3 = p.adjust(p, method = 'fdr')) |> 
  # dplyr::fil(padj_v3 < 0.05)
  dplyr::filter(padj_v2 < 0.05)

# Relabel assays for this specific plot
assaylabels <- c("Flow cytometry: white blood cell staining" = "Flow cytometry:\nimmune cells",
                   "Flow cytometry: T cell staining" = "Flow cytometry:\nimmune cells",
                   "Flow cytometry: stimulated T cells" = "Flow cytometry:\nimmune cell stimulation",
                   "Flow cytometry: unstimulated T cells" = "Flow cytometry:\nimmune cell stimulation",
                   "Blood haemogram" = "Routine\nbloods",
                   "Skin histology and transepidermal water loss assay" = "Clinical\nmeasures",
                   "Body composition" = "Body\ncomposition",
                   "Vascular and body sonography" = "Clinical\nmeasures",
                 'Functional sports exam' = "Clinical\nmeasures",
                   "Composite methylation scores: buccal" = "Buccal\nmethylation",
                   "Composite methylation scores: cervical" = "Cervical\nmethylation",
                   "Composite methylation scores: blood" = "Blood\nmethylation",
                   "Urine nuclear magnetic resonance: normalized" = "Urine\nmetabolome",
                   "Saliva nuclear magnetic resonance: normalized" = "Saliva\nmetabolome",
                   "Saliva nuclear magnetic resonance: normalized-log" = "Saliva\nmetabolome-log",
                   "Urine nuclear magnetic resonance: normalized-log" = "Urine\nmetabolome-log",
                   "Saliva microbiome: families" = "Saliva\nmicrobiome",
                   "Stool microbiome: families" = "Stool\nmicrobiome",
                   "Immune age: general" = "Immune\nage",
                   "ImmuneSMK" = 'ImmuneSMK')

# get into correct format for chord Diagram
corrdiag <- corr |> 
  dplyr::mutate(assay1_relab = recode(assay1, !!! assaylabels),
                assay2_relab = recode(assay2, !!! assaylabels)) |> 
  
  dplyr::mutate(assay1 = assay1_relab, 
                assay2 = assay2_relab) |> 
  dplyr::select(assay1, assay2, r) |> 
  dplyr::rename(cor = r)

# Colour assignment
col12 <- grDevices::colorRampPalette(cols[c(8, 1,2,3,5,4,6,7)])(13)

grid.col = c("Flow cytometry:\nimmune cells" = col12[11],
             "Immune\nage" = col12[10],
             "Routine\nbloods" = col12[9],
             "Body\ncomposition" = col12[8],
             "Clinical\nmeasures" = col12[7],
             "Cervical\nmethylation" = col12[6],
             "Buccal\nmethylation" = col12[5],
             "Blood\nmethylation" = col12[4],
             "Saliva\nmicrobiome" = col12[3],
             "Stool\nmicrobiome" = col12[2],
             "Urine\nmetabolome" = col12[1],
             "Saliva\nmetabolome" = col12[12],
             "Flow cytometry:\nimmune cell stimulation" = col12[13])

# Gaps
gaps = c("Flow cytometry:\nimmune cells" = 3,
         "Immune\nage" = 3,
         "Routine\nbloods" = 12,
         "Body\ncomposition" = 3,
         "Clinical\nmeasures" = 12,
         "Cervical\nmethylation" = 3,
         "Buccal\nmethylation" = 3,
         "Blood\nmethylation" = 12,
         "Saliva\nmicrobiome" = 3,
         "Stool\nmicrobiome" = 12,
         "Urine\nmetabolome" = 3,
         "Saliva\nmetabolome" = 12,
         "Flow cytometry:\nimmune cell stimulation" = 3)

# Order
order = names(grid.col)
# col12 <- grDevices::colorRampPalette(cols[c(8, 1,2,3,5,4,6,7)])(13)
# grid.col = c("ImmuneSMK" = col12[1],
#              "Flow cytometry:\nimmune cells" = col12[13],
#              "Immune\nage" = col12[12],
#              "Routine\nbloods" = col12[11],
#              "Body\ncomposition" = col12[10],
#              "Functional\nclinical measures" = col12[9],
#              "Cervical\nmethylation" = col12[8],
#              "Buccal\nmethylation" = col12[7],
#              "Blood\nmethylation" = col12[6],
#              "Saliva\nmicrobiome" = col12[5],
#              "Stool\nmicrobiome" = col12[4],
#              "Urine\nmetabolome" = col12[3],
#              "Saliva\nmetabolome" = col12[2])



# x <- corr2[grepl("methylation", corr2$assay1) & grepl("methylation", corr2$assay2),] # only one overlap for methylation

# Print
cairo_pdf(here("out/pdf/6b.pdf"), width = 8, height = 8)
  circos.par(gap.after = gaps)
  chordDiagram(corrdiag,
               grid.col = grid.col,
               order = order,
               annotationTrack = "grid",
               preAllocateTracks = list(track.height = max(strwidth(c(corrdiag$assay1, corrdiag$assay2)))))
  # we go back to the first track and customize sector labels
  circos.track(track.index = 1, panel.fun = function(x, y) {
    circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index, 
                facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5),cex = 0.9)
  }, bg.border = NA) # here set bg.border to NA is important
  circos.clear()
dev.off()
```

### c) Network diagram (methylation features)

```{r network.diag}
source(here("src/multi_network_diagram.R"))

corrObj <- corr |>
  dplyr::mutate(assay1_relab = recode(assay1, !!! assaylabels),
                assay2_relab = recode(assay2, !!! assaylabels)) |> 
  dplyr::mutate(assay1 = assay1_relab,
                                 assay2 = assay2_relab) |> 
  dplyr::mutate(measure1 = case_when(assay1 == 'Blood\nmethylation' ~ paste0("blood_", measure1),
                                     assay1 == 'Buccal\nmethylation' ~ paste0("buccal_", measure1),
                                     assay1 == 'Cervical\nmethylation' ~ paste0("cervical", measure1),
                                     TRUE ~ measure1),
                measure2 = case_when(assay2 == 'Blood\nmethylation' ~ paste0("blood_", measure2),
                                     assay2 == 'Buccal\nmethylation' ~ paste0("buccal_", measure2),
                                     assay2 == 'Cervical\nmethylation' ~ paste0("cervical", measure2),
                                     TRUE ~ measure2
                                     ))

features = 'PhenoAge|CausAge|DamAge|AdaptAge|AgeAccel|DunedinPACE|index_OC|index_mQTL|buccal_BC|index_BC|buccal_globalMethylation_line1'

# Note: uses corr and grid.col from previous interaction plot, make sure these exist

cairo_pdf(here("out/pdf/6c.pdf"), width = 11, height = 9)
multi_network_diagram(features = features,
                      seed = 2,
                      corrObj = corrObj,
                      expand = T,
                      # layout = layout.kamada.kawai,
                      # layout = layout.spring,
                      expand_r = 0.45)
dev.off()


```


## Extended Data Figure 14

see [mefisto analysis helper](mefisto.qmd)

## Extended Data 15

### a) p value histogram

```{r pvaluehist}
cols <- c("#1b69a1", "#48a0af", "#71b5a9", "#ec6669", "#f39668", "#bd647d", "#832c9b", "#5f70a8")

load(here('out/rmcorr_full.Rdata'))
corr_full <- corr
corr <- corr|> 
  dplyr::filter(padj_v2 < 0.05) |> 
  dplyr::arrange(padj_v2)

a <- corr_full |> 
  ggplot(aes(x = p)) +
  geom_histogram(bins = 300,
                 fill = 'black') +
  theme_bw() +
  theme(axis.title.x = element_markdown(),
        panel.grid = element_blank()) +
  labs(x = 'p value<sub>rm</sub>', y = 'count')

```

### b) hEpidish neutro and Neutrophils

```{r}
ind = 1
m1 = paste0(corr$assay1[ind],"_", corr$measure1[ind])
m2 = paste0(corr$assay2[ind],"_", corr$measure2[ind])
lab1 = "Neutrohil count (normalised)"
lab2 = "hEpidish neutrophil estimate (normalised)"
b <- rmcorr_plot(m1, m2, lab1, lab2)
```

### c) BCM/Creatinine

```{r}
ind = 459
m1 = paste0(corr$assay1[ind],"_", corr$measure1[ind])
m2 = paste0(corr$assay2[ind],"_", corr$measure2[ind])
lab1 = 'Body cellular mass (normalised)'
lab2 = 'Creatinine (normalised)'
c <- rmcorr_plot(m1, m2, lab1, lab2)
```

### d) GrimAge and Neutrophils

```{r grimage.neutro}
ind = 37
m1 = paste0(corr$assay1[ind],"_", corr$measure1[ind])
m2 = paste0(corr$assay2[ind],"_", corr$measure2[ind])
lab1 = "Neutrohil count (normalised)"
lab2 = "DNAmGrimAge V2 (normalised)"
d <- rmcorr_plot(m1, m2, lab1, lab2)
```

### e) GrimAge diagram

```{r}
source(here("src/rmcorr_diag.R"))
e <- rmcorr_diag("DNAmGrimAgeV2", corrObj = corr)

# # not shown:
# rmcorr_diag("DunedinPACE", corrObj = corr)
# rmcorr_diag("DamAge", corrObj = corr)
# rmcorr_diag("AdaptAge", corrObj = corr)
```

### f) PhenoAge diagram

```{r}
f <- rmcorr_diag("PhenoAge", corrObj = corr)
```

### g) Features with most connections: bmi

```{r}
m1 <- corr |> dplyr::group_by(measure1) |> dplyr::count()  |> dplyr::ungroup() |> dplyr::filter(n == max(n))
m2 <- corr |> dplyr::group_by(measure2) |> dplyr::count()  |> dplyr::ungroup() |> dplyr::filter(n == max(n))

g <- rmcorr_diag("fm", corrObj = corr)+
  labs(subtitle = 'fat mass')
h <- rmcorr_diag("ImmAge", corrObj = corr) +
  labs(subtitle = 'ImmuneAge')

```

### h) Sacchari

```{r}
i <- rmcorr_diag("Saccharimonadaceae", corrObj = corr) +
  labs(subtitle = 'Saccharimonadaceae (saliva)')
```

```{r}
design <- "
ABC
DEF
GHI
GHI"

plot <- (a+b+c+d+e+f+g+h + i) + plot_layout(design = design,
                                                       guides = 'collect') +
  plot_annotation(tag_levels = 'a')&
    theme(plot.tag = element_text(face = 'bold'))

cairo_pdf(here("out/pdf/e-integration.pdf"), width = 22,
          height = 17)
plot
dev.off()


# individual

ggsave(a, filename = 'out/pdf/e14a.pdf', width = 3, height = 3)
ggsave(b, filename = 'out/pdf/e14b.pdf', width = 3, height = 3)
ggsave(c, filename = 'out/pdf/e14c.pdf', width = 3, height = 3)
ggsave(d, filename = 'out/pdf/e14d.pdf', width = 3, height = 3)
ggsave(e, filename = 'out/pdf/e14e.pdf', width = 4.5, height = 3)
ggsave(f, filename = 'out/pdf/e14f.pdf', width = 4.5, height = 3)
ggsave(g, filename = 'out/pdf/e14g.pdf', width = 5.75, height = 7)
ggsave(h, filename = 'out/pdf/e14h.pdf', width = 5.75, height = 7)
ggsave(i, filename = 'out/pdf/e14i.pdf', width = 4.5, height = 3.5)



```


## Extended Data Figure 13

```{r}
features = 'hematocrit|hemoglobin|ferritin|transferrin|transferrinsat|buccal_ic'

corrObj2 <- corr |>
  dplyr::mutate(assay1_relab = recode(assay1, !!! assaylabels),
                assay2_relab = recode(assay2, !!! assaylabels)) |> 
  dplyr::mutate(assay1 = assay1_relab,
                                 assay2 = assay2_relab) |> 
  dplyr::mutate(measure1 = case_when(assay1 == 'Blood\nmethylation' ~ paste0("blood_", measure1),
                                     assay1 == 'Buccal\nmethylation' ~ paste0("buccal_", measure1),
                                     assay1 == 'Cervical\nmethylation' ~ paste0("cervical", measure1),
                                     TRUE ~ measure1),
                measure2 = case_when(assay2 == 'Blood\nmethylation' ~ paste0("blood_", measure2),
                                     assay2 == 'Buccal\nmethylation' ~ paste0("buccal_", measure2),
                                     assay2 == 'Cervical\nmethylation' ~ paste0("cervical", measure2),
                                     TRUE ~ measure2
                                     ))

cairo_pdf(here("out/pdf/e15.pdf"), width = 11, height = 9)
multi_network_diagram(features = features,
                      seed = 3,
                      corrObj = corrObj2,
                      expand = F,
                      expand_r = 0.6)
dev.off()

```



## Additional analysis: ASVs

```{r}
# Loading repeated measures correlation
load(here('out/rmcorr.Rdata'))
rmcorr_gen <- rmcorr
load(here('out/rmcorr_change.Rdata'))
rmcorr_change <- rmcorr
rmcorr <- rmcorr_gen

# First: filter those that have consistent sign for change
rm <- rmcorr |> 
  dplyr::select(measure1, measure2, assay1, assay2, rmcorr.r, p.vals) |> 
  dplyr::left_join(dplyr::select(rmcorr_change, measure1, measure2, rmcorr.r, p.vals, assay1, assay2),
                   by = c('measure1', 'measure2', 'assay1', 'assay2'), suffix = c('', '.change')) |> 
  dplyr::filter(sign(rmcorr.r) == sign(rmcorr.r.change) | grepl("-log", assay1) | grepl("-log", assay2)) 

# Additional filtering: Exclude visitId
corr <- rm |> dplyr::filter(!assay1 %in% c('visitId') & !assay2 %in% c('visitId'))


# Relabel assays Assay labels for the diagram
assaylabels <- c("Flow cytometry: white blood cell staining" = "Flow cytometry:\nimmune cells",
                 "Flow cytometry: T cell staining" = "Flow cytometry:\nimmune cells",
                 "Blood haemogram" = "Routine\nbloods",
                 "Skin histology and transepidermal water loss assay" = "Functional\nclinical measures",
                 "Body composition" = "Body\ncomposition",
                 "Vascular and body sonography" = "Functional\nclinical measures",
                 "Composite methylation scores: buccal" = "Buccal\nmethylation",
                 "Composite methylation scores: cervical" = "Cervical\nmethylation",
                 "Composite methylation scores: blood" = "Blood\nmethylation",
                 "Urine nuclear magnetic resonance: normalized" = "Urine\nmetabolome",
                 "Saliva nuclear magnetic resonance: normalized" = "Saliva\nmetabolome",
                 "Saliva nuclear magnetic resonance: normalized-log" = "Saliva\nmetabolome-log",
                 "Urine nuclear magnetic resonance: normalized-log" = "Urine\nmetabolome-log",
                 "Saliva microbiome: families" = "Saliva\nmicrobiome",
                 "Stool microbiome: families" = "Stool\nmicrobiome",
                 "Immune age: general" = "Immune\nage")


corr <- corr |> 
  dplyr::mutate(assay1 = recode(assay1, !!! assaylabels),
                assay2 = recode(assay2, !!! assaylabels))


corr <- corr |> 
  dplyr::mutate(assay1 = case_when((grepl("exam", assay1) & !grepl("_fe|_fv|_sysbp|_diabp|_vo2max|_rel|_abs|_max", measure1)) ~ "Routine\nbloods",
                                   ((grepl("exam", assay1) & grepl("_fe|_fv|_sysbp|_diabp|_vo2max|_rel|_abs|_max", measure1)) | grepl("pwv|imt|plaque", measure1)) ~ "Functional\nclinical measures",
                                   grepl("bmi|weight|scfat|vifat|bcm|ecw|fm", measure1) ~ "Body\ncomposition",
                                   TRUE ~ assay1),
                assay2 = case_when((grepl("exam", assay2) & !grepl("_fe|_fv|_sysbp|_diabp|_vo2max|_rel|_abs|_max", measure2)) ~ "Routine\nbloods",
                                   ((grepl("exam", assay2) & grepl("_fe|_fv|_sysbp|_diabp|_vo2max|_rel|_abs|_max", measure2)) | grepl("pwv|imt|plaque", measure2)) ~ "Functional\nclinical measures",
                                   grepl("bmi|weight|scfat|vifat|bcm|ecw|fm", measure2) ~ "Body\ncomposition",
                                   TRUE ~ assay2))

# Filter obvious 'self correlations'
corr <- corr |>
  dplyr::filter(assay1 != assay2 & !(assay1 == 'Immune\nage' & grepl("cytometry", assay2)) & !(assay2 == 'Immune\nage' & grepl("cytometry", assay1))) |>
  dplyr::filter(!(grepl("Saliva\nmicrobiome", assay1) & grepl("Saliva\nmicrobiome", assay2))) |> 
  dplyr::filter(!(grepl("Stool\nmicrobiome", assay1) & grepl("Stool\nmicrobiome", assay2))) |> 
  dplyr::filter(!(grepl("Saliva\nmetabolome", assay1) & grepl("Saliva\nmetabolome", assay2))) |> 
  dplyr::filter(!(grepl("Urine\nmetabolome", assay1) & grepl("Urine\nmetabolome", assay2)))

corr <- corr |> 
  # dplyr::mutate(padj = p.adjust(p.vals, method = 'fdr')) |> 
  # dplyr::filter(padj < 0.2)
  dplyr::filter(p.vals < 0.01) |> 
  dplyr::filter(!(grepl("metabolome", assay1) & !grepl("log", assay1)) & !(grepl("metabolome", assay2) & !grepl("log", assay2)))


# Buccal ic-------------------------
x <- corr[grepl("buccal_ic", corr$measure1) | grepl("buccal_ic", corr$measure2),] |> 
  dplyr::mutate(feature = ifelse(grepl("buccal_ic", measure1), measure2, measure1)) |> 
  tidyr::separate(feature, "_", into = c(NA, "feature"), extra = 'merge') |> 
  dplyr::filter(grepl("ASV|famil", measure1) | grepl("ASV|famil", measure2))

ASVtable_saliva <- readRDS("~/Dropbox/tg-data-prep/prep-scripts/11-preprocessed/2-microbiome/6-study-arm-subsets/if1/0-output/ASVtable_saliva_IK.Rds")
ASVtable_stool <- readRDS("~/Dropbox/tg-data-prep/prep-scripts/11-preprocessed/2-microbiome/6-study-arm-subsets/if1/0-output/ASVtable_stool_IK.Rds")
ASV <- plyr::rbind.fill(ASVtable_saliva, ASVtable_stool)

tmp <- ASV[match(x$feature, ASV$OTU),] |> 
  dplyr::select(OTU, Phylum:Species)

x <- x |> 
  dplyr::left_join(tmp, by = c('feature' = 'OTU'))

# # Example plots
# ind = 6
# m1 = x$measure1[ind]
# m2 = x$measure2[ind]
# lab1 = m1
# lab2 = m2
# rmcorr_plot(m1, m2, lab1, lab2)

# Cervical ic-------------------------

x <- corr[grepl("cervical_ic", corr$measure1) | grepl("cervical_ic", corr$measure2),] |> 
  dplyr::mutate(feature = ifelse(grepl("cervical_ic", measure1), measure2, measure1)) |> 
  tidyr::separate(feature, "_", into = c(NA, "feature"), extra = 'merge') |> 
  dplyr::filter(grepl("ASV|famil", measure1) | grepl("ASV|famil", measure2))

ASVtable_saliva <- readRDS("~/Dropbox/tg-data-prep/prep-scripts/11-preprocessed/2-microbiome/6-study-arm-subsets/if1/0-output/ASVtable_saliva_IK.Rds")
ASVtable_stool <- readRDS("~/Dropbox/tg-data-prep/prep-scripts/11-preprocessed/2-microbiome/6-study-arm-subsets/if1/0-output/ASVtable_stool_IK.Rds")
ASV <- plyr::rbind.fill(ASVtable_saliva, ASVtable_stool)

tmp <- ASV[match(x$feature, ASV$OTU),] |> 
  dplyr::select(OTU, Phylum:Species)

x <- x |> 
  dplyr::left_join(tmp, by = c('feature' = 'OTU'))

ind = 7
m1 = x$measure1[ind]
m2 = x$measure2[ind]
lab1 = m1
lab2 = m2
rmcorr_plot(m1, m2, lab1, lab2)

```

:::