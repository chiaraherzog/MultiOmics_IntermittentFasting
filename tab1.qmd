---
title: "Baseline characteristics (T1, ET1)"
format:
  html:
    toc: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = F, message = F, warning = F, eval = F)

library(dplyr)
library(gtsummary)
library(gt)
library(MultiAssayExperiment)

gtsummary::theme_gtsummary_journal(journal = "jama")
gtsummary::theme_gtsummary_compact()
```


```{r results='asis'}
source("src/process_and_summarise_data_T1.R")

result_table <- process_and_summarise_data_T1(
  data_raw_path = "data/data_raw.Rdata",
  baseline_change_path = "data/data_baseline_change.Rdata",
  output_html = "out/tab1.html",
  output_pdf = "out/tab1.pdf"
)

result_table$table
```



```{r eval = F}
# Are any significantly different across groups?
  
df <- result_table$data

# Identify column types to test
numeric_cols <- df |>
  select_if(is.numeric) |> 
  colnames()

categorical_cols <- df |> 
  select_if(~!is.numeric(.)) |> 
  colnames() |> 
  setdiff("complabel")  # Exclude 'complabel' from categorical columns

# Function to apply the appropriate test
run_comparison <- function(df, column, complabel) {
  if (column %in% numeric_cols) {
    # Kruskal-Wallis test for numeric data
    test <- kruskal.test(as.formula(paste(column, "~", complabel)), data = df)
    return(tidy(test))
  } else if (column %in% categorical_cols) {
    # Chi-squared test for categorical data
    test <- chisq.test(table(df[[column]], df[[complabel]]))
    return(tidy(test))
  }
}

# Apply tests to each column and gather results
results <- purrr::map_df(c(numeric_cols, categorical_cols), ~ {
  result <- run_comparison(df, .x, "complabel")
  result <- mutate(result, variable = .x)  # Add column name to the results
  result
})

# Plot results
cols <- c("#1b69a1", "#48a0af", "#71b5a9", "#ec6669", "#f39668", "#bd647d", "#832c9b", "#5f70a8")


df <- df |> dplyr::mutate(complabel = gsub("<br>", " ", complabel),
                          complabel = factor(complabel, levels = c("high compliance", "medium compliance", "low compliance", "dropout ")))

a <- df |> ggplot(aes(x = complabel,
                 y = delta_Body.composition_bmi)) +
  geom_boxplot(outlier.shape = NA,
               aes(fill = complabel),
               alpha = 0.2) +
  ggbeeswarm::geom_beeswarm(size = 1.5, alpha = 0.7,
                            aes(colour = complabel)) +
  theme_bw() +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank(), legend.position = 'none') +
  ggpubr::stat_compare_means(comparisons = list(c("high compliance", "medium compliance"),
                                                c("high compliance", "low compliance")),
                             label = 'p.format') +
  labs(x = '', y = '∆ BMI (M6-M0)')  +
  scale_colour_manual(aesthetics = c("fill", "colour"),
                      values = c(cols[c(1, 5, 4)], "grey60"))

b <- df |> ggplot(aes(x = complabel,
                 y = M2_bmi)) +
  geom_boxplot(outlier.shape = NA,
               aes(fill = complabel),
               alpha = 0.2) +
  ggbeeswarm::geom_beeswarm(size = 1.5, alpha = 0.7,
                            aes(colour = complabel)) +
  theme_bw() +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank()) +
  ggpubr::stat_compare_means(comparisons = list(c("high compliance", "medium compliance"),
                                                c("high compliance", "low compliance"),
                                                c("high compliance", "dropout ")),
                             label = 'p.format') +
  labs(x = '', y = '∆ BMI (M2-M0)') +
  scale_colour_manual(aesthetics = c("fill", "colour"),
                      values = c(cols[c(1, 5, 4)], "grey60"),
                      name = '')


c <- df |> ggplot(aes(x = complabel,
                 y = M4_bmi)) +
  geom_boxplot(outlier.shape = NA,
               aes(fill = complabel),
               alpha = 0.2) +
  ggbeeswarm::geom_beeswarm(size = 1.5, alpha = 0.7,
                            aes(colour = complabel)) +
  theme_bw() +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank()) +
  ggpubr::stat_compare_means(comparisons = list(c("high compliance", "medium compliance"),
                                                c("high compliance", "low compliance"),
                                                c("high compliance", "dropout ")),
                             label = 'p.format') +
  labs(x = '', y = '∆ BMI (M4-M0)') +
  scale_colour_manual(aesthetics = c("fill", "colour"),
                      values = c(cols[c(1, 5, 4)], "grey60"),
                      name = '')

(b|c|a) + plot_layout(guides = 'collect')
```


# By compliance group (Supplementary)

```{r}
load("data/data_raw.Rdata")
df <- as.data.frame(colData(data)) |> 
  dplyr::filter(visitId == "M0" & interventionId != "S" & is.na(dropout_date)) |> 
  dplyr::mutate(smoking_history = case_when(smoking_ever == "yes" ~ "Former smoker",
                                            smoking_ever == "no" ~ "Never smoker",
                                            smoking_ever == "unknown" ~ "unknown"),
                smoking_history = factor(smoking_history, levels = c("Never smoker", "Former smoker", "unknown")),
                diet = case_when(diet == 'normal' ~ 'normal',
                                 diet != 'unknown' ~ 'vegetarian/vegan/pescetarian',
                                 diet == 'unknown' ~ 'unknown'),
                diet = factor(diet, levels = c("normal", 'vegetarian/vegan/pescetarian', 'unknown')),
                mpstatrs = gsub("[*]", "", mpstatrs),
                interventionId = ifelse(interventionId == 'I', 'Intermittent fasting<br>',
                                        'Intermittent fasting<br>plus MCT'),
                activity = case_when(is.na(intactcurr) ~ "unknown",
                                     intactcurr %in% c("0") ~ "no intense activity",
                                     intactcurr %in% c("30 min", "1 h", "1.5 h", "2 h") ~ "30-149 min",
                                     TRUE ~ "≥150 min"),
                activity = factor(activity, levels = c("no intense activity", "30-149 min", "≥150 min", "unknown")),
                compliance = paste0(compliance, "<br>compliance"),
                compliance = factor(compliance, levels = c("high<br>compliance",
                                                           "medium<br>compliance",
                                                           "low<br>compliance")),
                dropout = ifelse(is.na(dropout_date), "no", "yes")) |> 
  dplyr::select(subjectId, age_at_consent, bmi_at_consent, mpstatrs, interventionId, diet, smoking_history, activity)

# table(df$compliance, df$dropout)
baseline <- as.data.frame(wideFormat(data[c("sysbp", "diabp", "cholesterol", "triglycerides", "hba1c", "glucose", "hemoglobin"),,
                            c('Functional sports exam', 'Blood haemogram')], colDataCols = c("visitId", "subjectId"))) |> 
  dplyr::filter(visitId == "M0") 

df <- df |> 
  dplyr::left_join(baseline, by = 'subjectId')|> 
  dplyr::select(-c(subjectId, primary, visitId)) |> 
  dplyr::mutate(Functional.sports.exam_diabp = as.numeric(Functional.sports.exam_diabp)) 


  labels <- list(
    age_at_consent = '<b>Age at consent</b>',
    bmi_at_consent = gt::html('<b>BMI at consent</b> (kg/m²)'),
    smoking_history = gt::html('<b>Smoking history</b>'),
    diet = gt::html('<b>Dietary preference</b>'),
    activity = gt::html('<b>Weekly intense activity (min)</b>'),
    mpstatrs = gt::html('<b>Postmenopausal</b>'),
    Functional.sports.exam_sysbp = gt::html('<b>Systolic blood pressure</b> (mmHg)'),
    Functional.sports.exam_diabp = "<b>Diastolic blood pressure</b> (mmHg)",
    Functional.sports.exam_cholesterol = gt::html('<b>Total cholesterol</b> (mg/dL)'),
    Functional.sports.exam_triglycerides = gt::html('<b>Triglycerides</b> (mg/dL)'),
    Functional.sports.exam_hba1c = gt::html('<b>HbA1c</b> (%)'),
    Functional.sports.exam_glucose = gt::html('<b>Fasting glucose</b> (mg/dL)'),
    Blood.haemogram_hemoglobin = gt::html('<b>Haemoglobin</b> (g/dL)')
  )

et1 <- df |> 
  gtsummary::tbl_summary(by = 'interventionId',
                         type = list(Functional.sports.exam_diabp ~ "continuous"),
                         label = labels,
                         digits = all_continuous() ~ 1,
                         missing = "no",
                         statistic = list(all_continuous() ~ "{mean} ({sd})",
                                          Functional.sports.exam_triglycerides ~ "{median} ({IQR})")) |> 
  modify_header(update = all_stat_cols() ~"<b>{level}</b><br>n = {n}")

et1x <- et1 |> 
  gtsummary::as_gt() |> 
  gt::fmt_markdown() |> 
  # gt::opt_stylize(style = 5) |> 
  gt::tab_options(
    table.width = px(550),
    table.font.size = 12,
    column_labels.font.size = 13,
    table.font.names = "Helvetica"
  ) |> 
  gt::opt_stylize(style = 3) |> 
  cols_align(align = "right", contains("stat"))

gt::gtsave(et1x, file = "out/stab1.html")
pagedown::chrome_print("out/stab1.html",output =
                       "out/stab1.pdf")

```
