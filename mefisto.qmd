---
title: "MEFISTO analyis"
format:
  html:
    toc: true
    code-fold: true
    code-overflow: wrap
    code-tools: true
---

# Extended Data Figure 13

![](figures-png/e14-mefisto.png)


```{r setup, include=F}
knitr::opts_chunk$set(echo = T, message = F, warning = F, eval = F)
```


```{r libs}
suppressWarnings(suppressMessages({
  library(tidyverse)
  library(MultiAssayExperiment)
  library(MOFA2)
  library(ComplexHeatmap)
  library(rcartocolor)
  library(patchwork)
  library(here)
}))


reticulate::use_python("/Users/chiara/opt/anaconda3/bin/python")
```

```{r here}
here::i_am("mefisto.qmd")
```

```{r dirs}
# dir.create("out/mefisto/")
outDir <- here("out/mefisto2")
```

This script prepares data for MEFISTO (MOFA2+) analysis.

::: {.panel-tabset}
 
# Figure

# Code 

Load MultiAssayExperiment

```{r getdat, eval = F}
# load in data
load(here('data/data_normalized_centred.Rdata'))
```

We filter variables:

```{r}
load("src/vars.Rdata")
vars <- vars |> 
  dplyr::filter(!assay %in% c("Body composition",
                              "Flow cytometry: stimulated T cells",
                              "Flow cytometry: unstimulated T cells",
                              "Functional sports exam",
                              "Immune age: general",
                              "Saliva microbiome: ASVs",
                              "Saliva microbiome: ASVs_clr",
                              "Stool microbiome: ASVs",
                              "Stool microbiome: ASVs_clr",
                              "Skin histology and transepidermal water loss assay",
                              "Saliva microbiome: families_clr",
                              "Stool microbiome: families_clr",
                              "Vascular and body sonography"
                              ))

varsList <- vars |> dplyr::group_by(assay) |> 
  dplyr::summarise(features = list(x), .groups = 'drop') |> 
  tibble::deframe()

data <- subsetByAssay(data, varsList)
```

We clean zero variance features.

```{r clean.zerovar}
for (i in 1:length(experiments(data))){
  experiments(data)[[i]] <- experiments(data)[[i]][apply(assay(data[[i]]), 1, function(x) var(x,na.rm = T) != 0), ]
}
```

List all experiments:

```{r}
experiments(data)
```

Generate the mae: 

```{r, eval = F}
mae <- data
mae <- mae[ , colData(mae)$visitId %in% c("M0", "M2", "M4", "M6") & colData(mae)$interventionId != 'S' ]
mae$group <- mae$interventionId
```

Mefisto pipeline - training and parameter selection.

```{r}
## 1.  Create the MOFA object
mofa <- create_mofa_from_MultiAssayExperiment(
  mae,
  group = mae$group
)

c <- as.data.frame(colData(mae))

### Fix labels
x <- samples_metadata(mofa)
# identical(x$sample, rownames(c))
x$t <- c$time
samples_metadata(mofa) <- x

mofa <- set_covariates(mofa, covariates = c("t")) # day as covariate
# mofa
# get_covariates(mofa, 1)
rm(x)

## Preview
gg_input <- plot_data_overview(mofa,
                               show_covariate = TRUE,
                               show_dimensions = TRUE,
                               covariate = "t")
gg_input


# 3. Options: we will test a few - as we did for MOFA at baseline :)
###  Modalities -> all continuous, hence gaussian approximation is good for all.
### Scaling -> data and views already scaled, so not needed.
data_opts   = get_default_data_options(mofa)

mefisto_opts <- get_default_mefisto_options(mofa)
mefisto_opts$model_groups <- FALSE
mefisto_opts$warping      <- FALSE

train_opts <- get_default_training_options(mofa)
train_opts$maxiter <- 200

model_opts <- get_default_model_options(mofa)
model_opts$num_factors # default = 15

model_opts_n10 <- model_opts
model_opts_n10$num_factors <- 10

## 3.  Attach options → prepare_mofa()
mofa_n15 <- prepare_mofa(mofa,
                         data_options   = data_opts,
                         model_options  = model_opts,
                         training_options = train_opts,
                         mefisto_options  = mefisto_opts)

mofa_n10 <- prepare_mofa(mofa,
                         data_options   = data_opts,
                         model_options  = model_opts_n10,
                         training_options = train_opts,
                         mefisto_options  = mefisto_opts)

## 4.  Fit the models → run_mofa()
fast_n10 <- run_mofa(
  mofa_n10,
  outfile = here('out/mefisto2', "fast_n10.hdf5")
)


fast_n15 <- run_mofa(
  mofa_n15,
  outfile = here('out/mefisto2', "fast_n15.hdf5")
)

# Diagnostics: let's compare ELBO values.
model.list <- list(fast_n10, fast_n15)
elbo <- compare_elbo(model.list)
elbo$data ## 15 factors best :)

plot_variance_explained(fast_n10, x = 'factor',
                        y = 'view')
plot_variance_explained(fast_n15, x = 'factor',
                        y = 'view')

# Let's retrain final model using 25 factors
train_opts$convergence_mode <- 'medium'
train_opts$maxiter <- 1000
train_opts

mofa_n15_medium <- prepare_mofa(mofa,
                                data_options   = data_opts,
                                model_options  = model_opts,
                                training_options = train_opts,
                                mefisto_options  = mefisto_opts)

mefisto_trained_overall <- run_mofa(
  mofa_n15_medium,
  outfile = here('out/mefisto2', "medium_n15.hdf5"),
) # Final model


## 5. Quick checks - Variance explained per view / factor
plot_variance_explained(mefisto_trained_overall, x = 'factor',
                        y = 'view')
plot_factor_cor(mefisto_trained_overall)


plot_factors_vs_cov(
  mefisto_trained_overall,
  covariate = "t"
)

```

```{r}
# Reload the model
model <- load_model(here('out/mefisto2', "medium_n15.hdf5"))
fact <- as.data.frame(get_factors(model, scale = T, as.data.frame = T)) |> 
  tidyr::pivot_wider(names_from = 'factor',
                     values_from = 'value')

features <- c("interventionId", "subjectId", "visitId", "compliance", "mpstatrs", "age_at_consent", "bmi_at_consent", "smoking_ever", "etohu_curr", "diet", "preg_ever", "ocp_curr", "hrt_curr", "supplement")

metadat <- colData(mae) |> 
  as.data.frame() |> 
  dplyr::select(any_of(features)) |> 
  rownames_to_column(var="sample") |> 
  distinct()

metadat$group <- metadat$interventionId

pheno_factors <- metadat  |> 
  dplyr::left_join(fact, by = "sample")
save(pheno_factors, file = 'out/mefisto2/pheno_factors.Rdata')

# metadat <- longForm(mae) |> 
#   as.data.frame() |> 
#   tibble::rownames_to_column('sample') |> 
#   dplyr::left_join(metadat, by = 'sample') |> 
#   dplyr::distinct()

samples_metadata(model) <- metadat
# print(model)

# extract data on variance explained by each factor
df1 <- plot_variance_explained(model,
                        x = 'factor',
                        y = 'view')
df1 <- as.data.frame(df1$data)
df1_sum <- df1 |> 
  dplyr::group_by(factor) |> 
  dplyr::reframe(ex = sum(value))

# simplify view names
df1$view <- gsub(": normalized","",df1$view)

# extract factor values
df2 <- plot_factors_vs_cov(model, color_by = "visitId", legend = FALSE, return_data = TRUE)

```


## a) plot variance explained

```{r, fig.height = 5}
p <- plot_variance_explained(model,
                         x = 'group',
                         y = 'factor') + theme(strip.text.x = element_text(angle = 90, hjust = 0))

ggsave(p, file = 'out/pdf/e13a.pdf', width = 6, height = 6.5)
```

## b) factor variance and significance association with selected covariates:

```{r}
feat <- features
labs <- c('interventionId', 'subjectId', 'visitId', 'compliance rate',
         'menopausal status', 'age (at consent)', 'BMI (at consent)', 
         'smoking (ever)', 'current alcohol units/wk', 'dietary pattern', 'pregnancy (ever)', 
         'current OCP use', 'current HRT use', 'supplement')

p <- mefisto_factor_covcor(df1,df2,feat,labs)
h <- p

cairo_pdf(file = 'out/pdf/e13b.pdf', width = 5, height = 3.5)
draw(h)
dev.off()
```

* factors 9, 11, 12, and 15 significantly associated with time
* factor 12 both with time and compliance

## c) PCA like plot

```{r}
source("src/mefisto_plots.R")
p <- mefisto_biplot_F12(df1,df2,"factor", factor1 = 'Factor9', factor2 = 'Factor12')
plot <- p +
  labs(x = 'Factor9', y = 'Factor12')
ggsave(plot, file = 'out/pdf/e13c.pdf', width = 6, height = 3.5)

```

## d-f) Factor changes

```{r}
p <- mefisto_factor_box(df2, metadat, "Factor12")
ggsave(p, file = 'out/pdf/e13d.pdf', width = 9, height = 3.5)

p <- mefisto_factor_box(df2, metadat, "Factor9")
ggsave(p, file = 'out/pdf/e13e.pdf', width = 9, height = 3.5)

p <- mefisto_factor_box(df2, metadat, "Factor11")
ggsave(p, file = 'out/pdf/e13f.pdf', width = 9, height = 3.5)
```

## g) Factor weights

```{r}
source("src/plotTopFactorWeights.R")

f12 <- plotTopFactorWeights(model, factorFilter = 12,orientation = 'landscape')
f12
cairo_pdf(file = 'out/pdf/e13g.pdf', width = 6, height = 3.5)
print(f12)
dev.off()

f9 <- plotTopFactorWeights(model, factorFilter = 9,orientation = 'landscape')
f9
cairo_pdf(file = 'out/pdf/e13h.pdf', width = 6, height = 3.5)
print(f9)
dev.off()

f11 <- plotTopFactorWeights(model, factorFilter = 11,orientation = 'landscape')
f11
cairo_pdf(file = 'out/pdf/e13i.pdf', width = 6, height = 3.5)
print(f11)
dev.off()
```

